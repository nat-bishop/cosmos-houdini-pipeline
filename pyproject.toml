[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cosmos-workflow"
version = "0.1.0"
description = "Python workflow orchestration for Nvidia Cosmos Transfer"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
dependencies = [
    "paramiko>=3.0.0",
    "toml>=0.10.2",
    "pyyaml>=6.0",
    "click>=8.0.0",
    "rich>=13.0.0",
]

# CLI scripts are provided as standalone executables (cosmos.bat for Windows, cosmos for Unix)
# No pip installation required - see README.md for setup instructions

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-timeout>=2.1.0",
    "pytest-xdist>=3.3.0",
    "ruff>=0.8.4",
    "mypy>=1.11.0",
    "bandit[toml]>=1.7.5",
    "safety>=3.0.0",
    "pre-commit>=3.5.0",
    "types-paramiko>=3.0.0",
    "types-toml>=0.10.0",
    "types-pyyaml>=6.0.0",
]

# Ruff - Modern Python linter (replaces flake8, isort, pylint, and more)
[tool.ruff]
line-length = 100
target-version = "py310"
fix = true

[tool.ruff.lint]
# Philosophy: Catch real bugs and security issues, not style opinions
select = [
    # Essential - Find real bugs
    "F",     # pyflakes (undefined names, unused imports, etc.)
    "E",     # pycodestyle errors (syntax, indentation)
    "W",     # pycodestyle warnings (whitespace, deprecated)

    # Important - Prevent common mistakes
    "B",     # flake8-bugbear (likely bugs and design problems)
    "I",     # isort (import sorting - consistency matters)
    "UP",    # pyupgrade (outdated Python syntax)
    "G",     # flake8-logging-format (logging performance)

    # Security - Critical for remote execution tool
    "S",     # flake8-bandit (security vulnerabilities)

    # Helpful - Catch timezone and other gotchas
    "DTZ",   # flake8-datetimez (timezone aware datetime)
    "RUF",   # Ruff-specific rules (helpful checks)
]

ignore = [
    # Line length handled by formatter
    "E501",   # line-too-long

    # Complexity metrics are subjective
    "B905",   # zip-without-explicit-strict

    # Allow assert (used for invariant checking)
    "S101",   # assert-used

    # Import flexibility needed
    "F401",   # unused-import (in __init__.py files)
]

[tool.ruff.lint.per-file-ignores]
# Test files have different rules
"tests/*" = [
    "S",       # Security checks not needed in tests
    "DTZ",     # Timezone awareness not critical in tests
]

# CLI and workflow modules legitimately use print for output
"cosmos_workflow/cli/*" = ["T20"]  # CLI needs print statements
"cosmos_workflow/workflows/*" = ["T20"]  # Workflows show progress
"cosmos_workflow/connection/ssh_manager.py" = ["T20"]  # SSH output streaming
"cosmos_workflow/prompts/*" = ["T20"]  # Prompt creation feedback
"cosmos_workflow/local_ai/*" = ["T20"]  # AI processing output

# Init files can have unused imports (for public API)
"**/__init__.py" = ["F401"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["cosmos_workflow"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"

# MyPy - Static type checking
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient, can make stricter later
disallow_any_generics = false
ignore_missing_imports = true
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
check_untyped_defs = true
no_implicit_optional = true
warn_incomplete_stub = true
pretty = true
show_error_context = true
show_column_numbers = true
show_error_codes = true
exclude = [
    "tests/",
    "build/",
    "dist/",
    ".venv/",
    "venv/",
]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = false

# Bandit - Security linting
[tool.bandit]
targets = ["cosmos_workflow"]
exclude_dirs = ["tests", ".venv", "venv", "build", "dist"]
skips = ["B101"]  # assert_used - needed for tests

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (mocked external deps)",
    "system: System tests (may need real resources)",
    "slow: Tests that take > 1 second",
    "gpu: Tests that require GPU",
    "ssh: Tests that require SSH connection",
    "docker: Tests that require Docker",
]
addopts = """
    --strict-markers
    -ra
    --cov=cosmos_workflow
    --cov-report=term-missing:skip-covered
    --cov-report=html
    --cov-report=xml
    --cov-fail-under=80
"""
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["cosmos_workflow"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/test_*.py",
    ".venv/*",
    "venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "pass",
    "@abstractmethod",
]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
